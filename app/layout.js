import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/providers/theme-provider";
import { Header } from "@/components/layout/header";
import { CommandMenu } from "@/components/command-menu";
import { Toaster } from "sonner";
import { UserProvider } from "@/components/providers/user-provider";
import { cookies } from "next/headers";
import { createClient } from "@/utils/supabase/server";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export const dynamic = "force-dynamic";

async function getUser() {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);

  try {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) return null;

    const { data: profile } = await supabase
      .from("profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    return {
      ...user,
      ...profile,
    };
  } catch (error) {
    console.error("Error getting user:", error);
    return null;
  }
}

export default async function RootLayout({ children }) {
  const user = await getUser();

  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <UserProvider initialUser={user}>
            <Header />
            <main className="flex-1">{children}</main>
            <CommandMenu />
            <Toaster
              theme="system"
              position="top-right"
              duration={2000}
              toastOptions={{
                style: {
                  background: "hsl(var(--background))",
                  color: "hsl(var(--foreground))",
                  border: "1px solid hsl(var(--border))",
                },
                success: {
                  icon: null,
                },
                error: {
                  icon: null,
                },
              }}
            />
          </UserProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
